Connection = {
    migrations: [],
    subscribers: [],
    entityMetadatas: [
      EntityMetadata {
        childEntityMetadatas: [],
        inheritanceTree: [Array],
        tableType: 'regular',
        withoutRowid: false,
        synchronize: true,
        hasNonNullableRelations: false,
        isJunction: false,
        isAlwaysUsingConstructor: true,
        isClosureJunction: false,
        hasMultiplePrimaryKeys: false,
        hasUUIDGeneratedColumns: false,
        ownColumns: [Array],
        columns: [Array],
        ancestorColumns: [],
        descendantColumns: [],
        nonVirtualColumns: [Array],
        ownerColumns: [],
        inverseColumns: [],
        generatedColumns: [Array],
        primaryColumns: [Array],
        ownRelations: [],
        relations: [],
        eagerRelations: [],
        lazyRelations: [],
        oneToOneRelations: [],
        ownerOneToOneRelations: [],
        oneToManyRelations: [],
        manyToOneRelations: [],
        manyToManyRelations: [],
        ownerManyToManyRelations: [],
        relationsWithJoinColumns: [],
        relationIds: [],
        relationCounts: [],
        foreignKeys: [],
        embeddeds: [],
        allEmbeddeds: [],
        ownIndices: [],
        indices: [],
        uniques: [],
        ownUniques: [],
        checks: [],
        exclusions: [],
        ownListeners: [],
        listeners: [],
        afterLoadListeners: [],
        beforeInsertListeners: [],
        afterInsertListeners: [],
        beforeUpdateListeners: [],
        afterUpdateListeners: [],
        beforeRemoveListeners: [],
        afterRemoveListeners: [],
        connection: [Circular *1],
        inheritancePattern: undefined,
        treeType: undefined,
        treeOptions: undefined,
        parentClosureEntityMetadata: undefined,
        tableMetadataArgs: [Object],
        target: [Function: User],
        expression: undefined,
        engine: undefined,
        database: undefined,
        givenTableName: undefined,
        targetName: 'User',
        tableNameWithoutPrefix: 'user',
        tableName: 'user',
        name: 'User',
        tablePath: 'user',
        orderBy: undefined,
        discriminatorValue: 'User',
        treeParentRelation: undefined,
        treeChildrenRelation: undefined,
        createDateColumn: undefined,
        updateDateColumn: undefined,
        deleteDateColumn: undefined,
        versionColumn: undefined,
        discriminatorColumn: undefined,
        treeLevelColumn: undefined,
        nestedSetLeftColumn: undefined,
        nestedSetRightColumn: undefined,
        materializedPathColumn: undefined,
        objectIdColumn: [ColumnMetadata],
        propertiesMap: [Object]
      }
    ],
    name: 'default',
    options: {
      type: 'mongodb',
      host: 'localhost',
      port: 27017,
      username: 'root',
      password: '',
      database: 'InversionDependencias',
      synchronize: false,
      logging: false,
      useUnifiedTopology: true,
      entities: [ 'src/entity/**/*.ts' ],
      migrations: [ 'src/migration/**/*.ts' ],
      subscribers: [ 'src/subscriber/**/*.ts' ],
      cli: {
        entitiesDir: 'src/entity',
        migrationsDir: 'src/migration',
        subscribersDir: 'src/subscriber'
      }
    },
    logger: AdvancedConsoleLogger { options: false },
    driver: MongoDriver {
      connection: [Circular *1],
      isReplicated: false,
      treeSupport: false,
      supportedDataTypes: [],
      spatialTypes: [],
      withLengthColumnTypes: [],
      withPrecisionColumnTypes: [],
      withScaleColumnTypes: [],
      mappedDataTypes: {
        createDate: 'int',
        createDateDefault: '',
        updateDate: 'int',
        updateDateDefault: '',
        deleteDate: 'int',
        deleteDateNullable: true,
        version: 'int',
        treeLevel: 'int',
        migrationId: 'int',
        migrationName: 'int',
        migrationTimestamp: 'int',
        cacheId: 'int',
        cacheIdentifier: 'int',
        cacheTime: 'int',
        cacheDuration: 'int',
        cacheQuery: 'int',
        cacheResult: 'int',
        metadataType: 'int',
        metadataDatabase: 'int',
        metadataSchema: 'int',
        metadataTable: 'int',
        metadataName: 'int',
        metadataValue: 'int'
      },
      validOptionNames: [
        'poolSize',
        'ssl',
        'sslValidate',
        'sslCA',
        'sslCert',
        'sslKey',
        'sslPass',
        'sslCRL',
        'autoReconnect',
        'noDelay',
        'keepAlive',
        'keepAliveInitialDelay',
        'connectTimeoutMS',
        'family',
        'socketTimeoutMS',
        'reconnectTries',
        'reconnectInterval',
        'ha',
        'haInterval',
        'replicaSet',
        'secondaryAcceptableLatencyMS',
        'acceptableLatencyMS',
        'connectWithNoPrimary',
        'authSource',
        'w',
        'wtimeout',
        'j',
        'writeConcern',
        'forceServerObjectId',
        'serializeFunctions',
        'ignoreUndefined',
        'raw',
        'bufferMaxEntries',
        'readPreference',
        'pkFactory',
        'promiseLibrary',
        'readConcern',
        'maxStalenessSeconds',
        'loggerLevel',
        'promoteValues',
        'promoteBuffers',
        'promoteLongs',
        'domainsEnabled',
        'checkServerIdentity',
        'validateOptions',
        'appname',
        'authMechanism',
        'compression',
        'fsync',
        'readPreferenceTags',
        'numberOfRetries',
        'auto_reconnect',
        'minSize',
        'monitorCommands',
        'useNewUrlParser',
        'useUnifiedTopology',
        'autoEncryption',
        'retryWrites'
      ],
      options: {
        type: 'mongodb',
        host: 'localhost',
        port: 27017,
        username: 'root',
        password: '',
        database: 'InversionDependencias',
        synchronize: false,
        logging: false,
        useUnifiedTopology: true,
        entities: [Array],
        migrations: [Array],
        subscribers: [Array],
        cli: [Object]
      },
      mongodb: <ref *2> [Function (anonymous)] {
        MongoError: [class MongoError extends Error],
        MongoNetworkError: [class MongoNetworkError extends MongoError],
        MongoTimeoutError: [class MongoTimeoutError extends MongoError],
        MongoServerSelectionError: [class MongoServerSelectionError extends MongoTimeoutError],
        MongoParseError: [class MongoParseError extends MongoError],
        MongoWriteConcernError: [class MongoWriteConcernError extends MongoError],
        MongoBulkWriteError: [class BulkWriteError extends MongoError],
        BulkWriteError: [class BulkWriteError extends MongoError],
        ServerApiVersion: [Object],
        Admin: [Function: Admin],
        MongoClient: [Function],
        Db: [Function],
        Collection: [Function: Collection],
        Server: [class Server extends TopologyBase],
        ReplSet: [class ReplSet extends TopologyBase],
        Mongos: [class Mongos extends TopologyBase],
        ReadPreference: [Function],
        GridStore: [Function],
        Chunk: [Function],
        Logger: [Function],
        AggregationCursor: [class AggregationCursor extends Cursor],
        CommandCursor: [class CommandCursor extends Cursor],
        Cursor: [class Cursor extends CoreCursor],
        GridFSBucket: [Function: GridFSBucket],
        CoreServer: [Function],
        CoreConnection: [class Connection extends EventEmitter],
        Binary: [Function],
        Code: [Function],
        Map: [Function],
        DBRef: [Function],
        Double: [Function],
        Int32: [Function],
        Long: [Function],
        MinKey: [Function],
        MaxKey: [Function],
        ObjectID: [Function],
        ObjectId: [Function],
        Symbol: [Function],
        Timestamp: [Function],
        BSONRegExp: [Function],
        Decimal128: [Function],
        connect: [Circular *2],
        instrument: [Function (anonymous)]
      },
      database: 'InversionDependencias',
      queryRunner: MongoQueryRunner {
        isReleased: false,
        isTransactionActive: false,
        data: {},
        connection: [Circular *1],
        databaseConnection: [MongoClient],
        broadcaster: [Broadcaster],
        manager: [MongoEntityManager]
      }
    },
    manager: MongoEntityManager {
      repositories: [],
      plainObjectToEntityTransformer: PlainObjectToNewEntityTransformer {},
      connection: [Circular *1]
    },
    namingStrategy: DefaultNamingStrategy {
      nestedSetColumnNames: { left: 'nsleft', right: 'nsright' },
      materializedPathColumnName: 'mpath'
    },
    queryResultCache: undefined,
    relationLoader: RelationLoader { connection: [Circular *1] },
    isConnected: true
  }
  